import { ChangeEvent } from 'react';
import PropTypes from 'prop-types';
export type PopoverAlignment = 'top' | 'bottom' | 'left' | 'right' | 'top-start' | 'top-end' | 'bottom-start' | 'bottom-end' | 'left-end' | 'left-start' | 'right-end' | 'right-start';
interface TableToolbarFilterProps {
    /**
     * Specify how the popover should align with the trigger element
     */
    align?: PopoverAlignment;
    /**
     * Provide an optional class name for the toolbar filter
     */
    className?: string;
    /**
     * Provide an optional hook that is called each time the input is updated
     */
    onChange?: (event: '' | ChangeEvent<HTMLInputElement>) => void;
    /**
     * Provide an function that is called when the apply button is clicked
     */
    onApplyFilter?: (selectedCheckboxes: Array<string>) => void;
    /**
     * Provide an function that is called when the reset button is clicked
     */
    onResetFilter?: () => void;
}
declare const TableToolbarFilter: {
    ({ align, onApplyFilter, onResetFilter, className, ...rest }: TableToolbarFilterProps): import("react/jsx-runtime").JSX.Element;
    propTypes: {
        /**
         * Specify how the popover should align with the trigger element
         */
        align: PropTypes.Requireable<string>;
        /**
         * Provide an optional class name for the search container
         */
        className: PropTypes.Requireable<string>;
        /**
         * Provide an function that is called when the apply button is clicked
         */
        onApplyFilter: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an optional hook that is called each time the input is updated
         */
        onChange: PropTypes.Requireable<(...args: any[]) => any>;
        /**
         * Provide an function that is called when the reset button is clicked
         */
        onResetFilter: PropTypes.Requireable<(...args: any[]) => any>;
    };
};
export default TableToolbarFilter;
