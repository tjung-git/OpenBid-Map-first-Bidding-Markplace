/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var PropTypes = require('prop-types');
var React = require('react');
var InlineCheckbox = require('../InlineCheckbox/InlineCheckbox.js');
var cx = require('classnames');
var usePrefix = require('../../internal/usePrefix.js');
var deprecate = require('../../prop-types/deprecate.js');

const TableSelectAll = ({
  ariaLabel: deprecatedAriaLabel = 'Select all rows in the table',
  ['aria-label']: ariaLabel,
  checked,
  id,
  indeterminate,
  name,
  onSelect,
  disabled,
  className
}) => {
  const prefix = usePrefix.usePrefix();
  return /*#__PURE__*/React.createElement("th", {
    "aria-live": "off",
    scope: "col",
    className: cx(`${prefix}--table-column-checkbox`, className)
  }, /*#__PURE__*/React.createElement(InlineCheckbox.default, {
    "aria-label": ariaLabel || deprecatedAriaLabel,
    checked: checked,
    id: id,
    indeterminate: indeterminate,
    name: name,
    onClick: onSelect,
    disabled: disabled
  }));
};
TableSelectAll.propTypes = {
  /**
   * Specify the aria label for the underlying input control
   */
  ['aria-label']: PropTypes.string,
  /**
   * Deprecated, please use `aria-label` instead.
   * Specify the aria label for the underlying input control
   */
  ariaLabel: deprecate.deprecate(PropTypes.string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),
  /**
   * Specify whether all items are selected, or not
   */
  checked: PropTypes.bool,
  /**
   * The CSS class names of the cell that wraps the underlying input control
   */
  className: PropTypes.string,
  /**
   * Specify whether the checkbox input should be disabled
   */
  disabled: PropTypes.bool,
  /**
   * Provide an `id` for the underlying input control
   */
  id: PropTypes.string.isRequired,
  /**
   * Specify whether the selection only has a subset of all items
   */
  indeterminate: PropTypes.bool,
  /**
   * Provide a `name` for the underlying input control
   */
  name: PropTypes.string.isRequired,
  /**
   * Provide a handler to listen to when a user initiates a selection request
   */
  onSelect: PropTypes.func.isRequired
};

exports.default = TableSelectAll;
