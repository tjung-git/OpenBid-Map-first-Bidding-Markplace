/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var iconsReact = require('@carbon/icons-react');
var cx = require('classnames');
var React = require('react');
var PropTypes = require('prop-types');
var AriaPropTypes = require('../../prop-types/AriaPropTypes.js');
var usePrefix = require('../../internal/usePrefix.js');

var _Menu, _Close;
function HeaderMenuButton({
  'aria-label': ariaLabel,
  'aria-labelledby': ariaLabelledBy,
  className: customClassName,
  renderMenuIcon,
  renderCloseIcon,
  isActive,
  isCollapsible,
  ...rest
}) {
  const prefix = usePrefix.usePrefix();
  const className = cx({
    ...(typeof customClassName === 'string' && {
      [customClassName]: !!customClassName
    }),
    [`${prefix}--header__action`]: true,
    [`${prefix}--header__menu-trigger`]: true,
    [`${prefix}--header__action--active`]: isActive,
    [`${prefix}--header__menu-toggle`]: true,
    [`${prefix}--header__menu-toggle__hidden`]: !isCollapsible
  });
  const menuIcon = renderMenuIcon ? renderMenuIcon : _Menu || (_Menu = /*#__PURE__*/React.createElement(iconsReact.Menu, {
    size: 20
  }));
  const closeIcon = renderCloseIcon ? renderCloseIcon : _Close || (_Close = /*#__PURE__*/React.createElement(iconsReact.Close, {
    size: 20
  }));
  return /*#__PURE__*/React.createElement("button", _rollupPluginBabelHelpers.extends({}, rest, {
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledBy,
    className: className,
    title: ariaLabel,
    type: "button"
  }), isActive ? closeIcon : menuIcon);
}
HeaderMenuButton.propTypes = {
  /**
   * Required props for accessibility label on the underlying menu button
   */
  ...AriaPropTypes.AriaLabelPropType,
  /**
   * Optionally provide a custom class name that is applied to the underlying
   * button
   */
  className: PropTypes.string,
  /**
   * Specify whether the menu button is "active".
   */
  isActive: PropTypes.bool,
  /**
   * Specify whether the menu button is collapsible.
   */
  isCollapsible: PropTypes.bool,
  /**
   * Optionally provide an onClick handler that is called when the underlying
   * button fires it's onclick event
   */
  onClick: PropTypes.func
};

exports.default = HeaderMenuButton;
