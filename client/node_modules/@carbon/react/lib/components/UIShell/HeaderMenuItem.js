/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var PropTypes = require('prop-types');
var React = require('react');
var cx = require('classnames');
var Link = require('./Link.js');
var usePrefix = require('../../internal/usePrefix.js');
var deprecate = require('../../prop-types/deprecate.js');

const HeaderMenuItem = /*#__PURE__*/React.forwardRef(function HeaderMenuItem({
  className,
  isActive,
  isCurrentPage,
  'aria-current': ariaCurrent,
  children,
  role,
  tabIndex,
  ...rest
}, ref) {
  const prefix = usePrefix.usePrefix();
  const resolvedTabIndex = tabIndex ?? 0;
  if (isCurrentPage) {
    isActive = isCurrentPage;
  }
  // We set the current class only if `isActive` is passed in and we do
  // not have an `aria-current="page"` set for the breadcrumb item. When this
  // class is added we also set `aria-current` as `true`
  const hasCurrentClass = isActive && ariaCurrent !== 'page';
  const linkClassName = cx({
    [`${prefix}--header__menu-item`]: true,
    [`${prefix}--header__menu-item--current`]: hasCurrentClass
  });
  return /*#__PURE__*/React.createElement("li", {
    className: className,
    role: role
  }, /*#__PURE__*/React.createElement(Link.default, _rollupPluginBabelHelpers.extends({}, rest, {
    "aria-current": hasCurrentClass ? true : ariaCurrent,
    className: linkClassName,
    ref: ref,
    tabIndex: resolvedTabIndex
  }), /*#__PURE__*/React.createElement("span", {
    className: `${prefix}--text-truncate--end`
  }, children)));
});
HeaderMenuItem.displayName = 'HeaderMenuItem';
HeaderMenuItem.propTypes = {
  /**
   * Pass in a valid `element` to replace the underlying `<a>` tag with a
   * custom `Link` element
   */
  ...Link.LinkPropTypes,
  /**
   * Pass in children that are either a string or can be read as a string by
   * screen readers
   */
  children: PropTypes.node.isRequired,
  /**
   * Optionally provide a custom class to apply to the underlying `<li>` node
   */
  className: PropTypes.string,
  /**
   * If `true` and `aria-current !== 'page'`, applies selected styles to the item and sets `aria-current="true"`.
   */
  isActive: PropTypes.bool,
  /**
   * Applies selected styles to the item if a user sets this to true and `aria-current !== 'page'`.
   * @deprecated Please use `isActive` instead. This will be removed in the next major release.
   */
  isCurrentPage: deprecate.deprecate(PropTypes.bool, 'The `isCurrentPage` prop for `HeaderMenuItem` has ' + 'been deprecated. Please use `isActive` instead. This will be removed in the next major release.'),
  /**
   * Optionally supply a role for the underlying `<li>` node. Useful for resetting
   * `<ul>` semantics for menus.
   */
  role: PropTypes.string,
  /**
   * Specify the tab index of the Link
   */
  tabIndex: PropTypes.number
};

exports.default = HeaderMenuItem;
